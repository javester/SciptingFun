<#

DISCLAIMER - By downloading / using these scripts you are agreeing that they are "Use at your own risk" and I will not be held responsible for any impact. Please make sure they will work for your need!

<# These sample scripts are not supported under any Microsoft standard support program or service. The sample scripts

are provided AS IS without warranty of any kind. Microsoft further disclaims all implied warranties including, without

limitation, any implied warranties of merchantability or of fitness for a particular purpose. The entire risk arising

out of the use or performance of the sample scripts and documentation remains with you. In no event shall Microsoft,

its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages

whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business

information, or other pecuniary loss) arising out of the use of or inability to use the sample scripts or documentation,

even if Microsoft has been advised of the possibility of such damages.


    Collect Azure VM details.
    
    .SYNOPSIS 
        Searches every available subscription and collects Azure VM details, classic and ARM
        Use swtich -OutputtoCSV switch for a CSV
        authored by <REMOVED>@microsoft.com
        v1.0 12/17/2019
        v1.1 03/20/2020 - added OS disk encryption property for ARM VMs
        v1.2 08/20/2020 - added primary nic IP addresses
                          added Powerstate property
                          added param for single subscriptionid
        08/27/2020 -      fixed bug - thew error if vm has no public ip
                          default output to CSV on


#>
param(
$subscriptionid = "6abccfbc-2d9a-4721-925d-3d231fe91340", # if you want to grab VM details from just one subscription, specify the subid
[switch]$OutputToCSV = $true  # ** use this switch if you want to output the results to a .CSV file. Defaults to TRUE

)

#begin arm
if (!$subscriptionid)
{$subs = Get-AzSubscription -ErrorAction Stop}
else {$subs = Get-AzSubscription -SubscriptionId $subscriptionid -ErrorAction Stop}

$results = @()

foreach ($sub in $subs)
{
    $vmsarm = $null
    $vmsasm = $null

    Write-Output "`nSubscription: $($sub.Name) - $($sub.Id)"
    $subcontext = Select-AzSubscription -Subscription $($sub.Id)
    
    $disks = Get-AzDisk
    
    $vmsarm = Get-AzVM -Status -ErrorAction Stop
    foreach ($vm in $vmsarm)
    {
        
        $obj = New-Object -TypeName PSObject
        $obj | Add-Member -MemberType NoteProperty -Name SubscriptionName -Value $($sub.Name)
        $obj | Add-Member -MemberType NoteProperty -Name SubscriptionID -Value $($sub.Id)
        $obj | Add-Member -MemberType NoteProperty -Name RGroup/CService -Value $($vm.ResourceGroupName)
        $obj | Add-Member -MemberType NoteProperty -Name VM_Name -Value $($vm.Name)
        $obj | Add-Member -MemberType NoteProperty -Name Mgr -Value 'ARM'
        $obj | Add-Member -MemberType NoteProperty -Name OS -Value $($vm.storageprofile.OsDisk.OsType)
        $obj | Add-Member -MemberType NoteProperty -Name Location -Value $($vm.Location)
        $obj | Add-Member -MemberType NoteProperty -Name VMSize -Value $($vm.HardwareProfile.VmSize)
        $obj | Add-Member -MemberType NoteProperty -Name PowerState -Value $($vm.PowerState)

        $size = $Null
        $size = Get-AzVMSize -Location $($vm.Location) |?{$_.Name -like $($Vm.HardwareProfile.VmSize)}
        $obj | Add-Member -MemberType NoteProperty -Name NumberOfCores -Value $size.NumberOfCores
        $obj | Add-Member -MemberType NoteProperty -Name MemoryInGB -Value ($size.MemoryInMB /1024)
        $obj | Add-Member -MemberType NoteProperty -Name OSDiskName -Value $null
        $obj | Add-Member -MemberType NoteProperty -Name OSDiskSizeGB -Value $null
        $obj | Add-Member -MemberType NoteProperty -Name OSDiskEncryption -Value $null
        $obj | Add-Member -MemberType NoteProperty -Name PrivateIPAddress -Value $null
        $obj | Add-Member -MemberType NoteProperty -Name PublicIPAddress -Value $null



        $nic = ($vm.NetworkProfile.Networkinterfaces.id).Split('/')[-1]
        $nicdetails = Get-AzNetworkInterface -Name $nic
        $privateip = $($nicdetails.IpConfigurations.PrivateIpAddress)

        if ($($nicdetails.IpConfigurations.PublicIPAddress).count -gt 1)
        {
            $publicipc = $($nicdetails.IpConfigurations.PublicIPAddress)[0]
            $publicip = (Get-AzPublicIpAddress -Name $($publicipc.Id.Split('/')[-1])).IpAddress
        }
        elseif ($($nicdetails.IpConfigurations.PublicIPAddress))
        {
            $publicipc = $($nicdetails.IpConfigurations.PublicIPAddress)
            $publicip = (Get-AzPublicIpAddress -Name $($publicipc.Id.Split('/')[-1])).IpAddress
            #$publicip = "Not Assigned"
        }
        
        $obj.PrivateIPAddress = $privateip
        $obj.PublicIpAddress = $publicip

        foreach ($disk in $disks)
        {
            if ($disk.ManagedBy -like "*$($Vm.Name)")
            {
                $obj.OSDiskName = $($Disk.Name)
                $obj.OSDiskSizeGB = $($Disk.DiskSizeGB)
                $diskenc = Get-AzVMDiskEncryptionStatus -ResourceGroupName $($vm.ResourceGroupName) -VMName $($vm.Name) -ErrorAction Continue
                $obj.OSDiskEncryption = $diskenc.OSVolumeEncrypted



            }
        }

        $results += $obj
        $obj
        ""
    }
} # end arm

# start asm
if (!$subscriptionid)
    {
     try
        {
            $csubs = Get-AzureSubscription
        }
        catch
        {
            Add-AzureAccount
        }
    }

else{$csubs = Get-AzureSubscription $subscriptionid}

foreach ($csub in $csubs)
{
    try{$csubcontext = Select-AzureSubscription -SubscriptionId $($csub.SubscriptionID)}catch{Add-AzureAccount}
    
    Write-Output "`nSubscription: $($csub.SubscriptionName) - $($csub.SubscriptionId)"
    $vmsasm = Get-AzureVM -ErrorAction SilentlyContinue # errors if no access
    
        
    foreach ($vmc in $vmsasm)
    {
        $cobj = New-Object -TypeName PSObject
        Write-Output "Found VM: $($vmc.Name)"
        $cobj | Add-Member -MemberType NoteProperty -Name SubscriptionName -Value $($csub.SubscriptionName)
        $cobj | Add-Member -MemberType NoteProperty -Name SubscriptionID -Value $($csub.SubscriptionId)
        $cobj | Add-Member -MemberType NoteProperty -Name RGroup/CService -Value $($vmc.ServiceName)
        $cobj | Add-Member -MemberType NoteProperty -Name VM_Name -Value $($vmc.Name)
        $cobj | Add-Member -MemberType NoteProperty -Name PowerState -Value $($vmc.PowerState)
        $cobj | Add-Member -MemberType NoteProperty -Name Mgr -Value 'ASM'
        $cobj | Add-Member -MemberType NoteProperty -Name VMSize -Value $($vmc.InstanceSize)

        $size = $Null
        $size = Get-AzVMSize -Location $($vm.Location) |?{$_.Name -like $($Vmc.InstanceSize)}
        $cobj | Add-Member -MemberType NoteProperty -Name NumberOfCores -Value $size.NumberOfCores
        $cobj | Add-Member -MemberType NoteProperty -Name MemoryInGB -Value ($size.MemoryInMB /1024)
        $cobj | Add-Member -MemberType NoteProperty -Name OSDiskName -Value $($vmc.VM.OSVirtualHardDisk.DiskName)
        $cobj | Add-Member -MemberType NoteProperty -Name PrivateIPAddress -Value $($vmc.IpAddress)
        $cobj | Add-Member -MemberType NoteProperty -Name PublicIPAddress -Value $null

        $cdisk = Get-AzureDisk |?{$_.MediaLink -eq $vmc.vm.OSVirtualHardDisk.MediaLink}

        $cobj | Add-Member -MemberType NoteProperty -Name Location -Value $($cdisk.Location)
        
        $cobj | Add-Member -MemberType NoteProperty -Name OSDiskSizeGB -Value $($cdisk.DiskSizeInGB)
                
        $cobj | Add-Member -MemberType NoteProperty -Name OS -Value $($cdisk.OS)
        
        foreach ($cdisk in $osdisks)
        {
            if ($cdisk.ManagedBy -like "*$($Vmc.Name)")
            {
              
            }
        }
        
        $results += $cobj
    }
} # end asm
 

 if ($outputtoCSV)
 {
    $d = (Get-Date -Format u).Replace(' ','T').Replace(':','.')
    $outname = "VM-Audit-$d.csv"
    $results | Export-Csv -NoTypeInformation -Path ".\$outname" -EA Stop
    if (Test-Path -Path .\$outname)
    {
        Write-Output "Results output to .\$outname"
    }
 }
 

